pipeline {
  agent none
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '30'))
    timestamps()
  }

  environment {
    AWS_REGION    = 'ap-northeast-2'
    ACCOUNT_ID    = '229816860374'
    ECR_REPO      = 'chat-websocket'           // ← WS 이미지 리포지토리
    ORG           = 'aws-devlopment-project'
    REPO          = 'backend-api-websocket'
    BUILD_CONTEXT = '/workspace'
    DOCKERFILE    = 'Dockerfile.websocket'     // ← WS Dockerfile(네가 쓰던 그대로)
    K8S_NS        = 'cicd'
    JOB_TEMPLATE  = 'job-kaniko-template.yaml'
    GIT_BASIC_ID  = 'jenkinstoken'
  }

  stages {
    stage('Prepare') {
      agent { label 'built-in' }
      steps {
        script {
          sh 'git rev-parse HEAD >/dev/null 2>&1 || true'
          env.SHORT_SHA = sh(returnStdout: true, script: 'echo "${GIT_COMMIT:-${BRANCH_NAME:-master}}" | cut -c1-7').trim()
          env.IMAGE_TAG = "sha-${env.SHORT_SHA}"
          env.GIT_REF   = sh(returnStdout:true, script:'git rev-parse --abbrev-ref HEAD || echo main').trim()
          echo "IMAGE_TAG=${env.IMAGE_TAG}, GIT_REF=${env.GIT_REF}"
        }
      }
    }

    stage('Ensure Write-Back Secret (for Image Updater)') {
      agent {
        kubernetes {
          label "kubectl-agent-${env.BUILD_NUMBER}"
          defaultContainer 'kubectl'
          namespace "${env.K8S_NS}"
          serviceAccount 'jenkins-sa'
          yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: kubectl
    image: bitnami/kubectl:1.29
    command:
    - cat
    tty: true
"""
        }
      }
      steps {
        container('kubectl') {
          withCredentials([usernamePassword(credentialsId: env.GIT_BASIC_ID,
                                            usernameVariable: 'GH_USER',
                                            passwordVariable: 'GH_PASS')]) {
            sh '''
              set -e
              kubectl -n "$K8S_NS" create secret generic argocd-image-updater-git \
                --from-literal=username="$GH_USER" \
                --from-literal=password="$GH_PASS" \
                -o yaml --dry-run=client | kubectl apply -f -
            '''
          }
        }
      }
    }

    stage('Build & Push via Kaniko Job') {
      agent {
        kubernetes {
          label "kubectl-agent-${env.BUILD_NUMBER}"
          defaultContainer 'kubectl'
          namespace "${env.K8S_NS}"
          serviceAccount 'jenkins-sa'
          yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: kubectl
    image: bitnami/kubectl:1.29
    command:
    - cat
    tty: true
"""
        }
      }
      steps {
        container('kubectl') {
          withCredentials([usernamePassword(credentialsId: env.GIT_BASIC_ID,
                                            usernameVariable: 'GH_USER',
                                            passwordVariable: 'GH_PASS')]) {
            sh '''
              set -e
              GH_SECRET="gh-basic-ci-${BUILD_NUMBER}"
              kubectl -n "$K8S_NS" create secret generic "$GH_SECRET" \
                --from-literal=username="$GH_USER" \
                --from-literal=password="$GH_PASS" \
                -o yaml --dry-run=client | kubectl apply -f -

              sed -e 's|__AWS_REGION__|'"$AWS_REGION"'|g' \
                  -e 's|__ACCOUNT_ID__|'"$ACCOUNT_ID"'|g' \
                  -e 's|__ECR_REPO__|'"$ECR_REPO"'|g' \
                  -e 's|__IMAGE_TAG__|'"$IMAGE_TAG"'|g' \
                  -e 's|__GIT_REF__|'"$GIT_REF"'|g' \
                  -e 's|__ORG__|'"$ORG"'|g' \
                  -e 's|__REPO__|'"$REPO"'|g' \
                  -e 's|__BUILD_CONTEXT__|'"$BUILD_CONTEXT"'|g' \
                  -e 's|__DOCKERFILE__|'"$DOCKERFILE"'|g' \
                  -e 's|__GH_SECRET__|'"$GH_SECRET"'|g' \
                  "$JOB_TEMPLATE" > rendered-kaniko.yaml

              kubectl -n "$K8S_NS" apply -f rendered-kaniko.yaml
              kubectl -n "$K8S_NS" wait --for=condition=complete --timeout=45m job/kaniko-build-"$IMAGE_TAG"
              kubectl -n "$K8S_NS" logs -l job-name=kaniko-build-"$IMAGE_TAG" --tail=-1

              kubectl -n "$K8S_NS" delete job/kaniko-build-"$IMAGE_TAG" --ignore-not-found
              kubectl -n "$K8S_NS" delete secret "$GH_SECRET" --ignore-not-found
            '''
          }
        }
      }
    }

    stage('Cleanup workspace') {
      agent { label 'built-in' }
      steps { cleanWs() }
    }
  }
}
